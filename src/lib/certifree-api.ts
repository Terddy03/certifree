import { supabase } from "./supabase";
import { Certification, CertiFreeLesson, CertiFreeEnrollment, CertiFreeCertificate, CertiFreeModule, CertiFreeQuiz, CertiFreeQuizQuestion, CertiFreeQuizAttempt } from "./types/certifree";

// Interfaces for input
export interface CategoryInput {
  name: string;
  slug: string;
  description?: string;
}

export interface CertificationInput {
  // id?: string; // Removed to ensure UUID is generated by the database
  title: string;
  provider: string;
  category: string; // category name or slug
  difficulty: string;
  duration: string;
  description: string;
  imageUrl?: string;
  externalUrl: string;
  isFree: boolean;
  certificationType: string;
  skills?: string[]; // Corrected to string[]
  prerequisites?: string[]; // Corrected to string[]
  rating?: number;
  totalReviews?: number;
  tags?: string[]; // Corrected to string[]
  type?: "public" | "certifree";
  courseId?: string; // Link to CertiFree course if applicable
  completion_count?: number; // Added to match database schema
}

export interface CourseInput {
  title: string;
  description?: string;
  imageUrl?: string;
  status?: 'draft' | 'published';
}

export interface LessonInput {
  courseId: string; // Refers to CertiFree Course
  title: string;
  content?: string;
  videoUrl?: string;
  order: number;
}

export interface QuizInput {
  title: string;
  description?: string;
  moduleId?: string | null;
  courseId?: string | null;
  order?: number | null;
  passPercentage: number;
  type: 'module_quiz' | 'final_quiz';
}

export interface QuizQuestionInput {
  quizId: string;
  questionText: string;
  questionType: 'multiple_choice' | 'true_false' | 'short_answer';
  options?: string[] | null;
  correctAnswer: string;
  explanation?: string | null;
  order: number;
}

export interface QuizAttemptInput {
  userId: string;
  quizId: string;
  scorePercentage: number;
  passed: boolean;
  attemptNumber: number;
  answers?: Record<string, any> | null;
}


// --- Categories CRUD ---
export async function listCategories() {
  return supabase.from("categories").select("*").order("name");
}

export async function createCategory(input: CategoryInput) {
  return supabase.from("categories").insert({
    name: input.name,
    slug: input.slug,
    description: input.description || null,
  });
}

export async function updateCategory(id: string, patch: Partial<CategoryInput>) {
  return supabase.from("categories").update(patch).eq("id", id);
}

export async function deleteCategory(id: string) {
  return supabase.from("categories").delete().eq("id", id);
}


// --- Certifications CRUD (These operate on the 'certifications' table) ---
export async function listCertifications() {
  let query = supabase.from("certifications").select("*").order("title");
  // if (search && search.trim()) {
  //   query = query.ilike("title", `%${search}%`);
  // }
  return query;
}

export async function getCertification(id: string) {
  const { data, error } = await supabase
    .from('certifications')
    .select('*')
    .eq('id', id)
    .single();
  return { data: data as Certification, error };
}

export async function createCertification(input: CertificationInput, admin_id: string) {
  const payload = {
    title: input.title,
    provider: input.provider,
    category: input.category,
    difficulty: input.difficulty,
    duration: input.duration,
    description: input.description,
    image_url: input.imageUrl ?? null,
    external_url: input.externalUrl,
    is_free: input.isFree,
    certification_type: input.certificationType,
    skills: input.skills ?? [],
    prerequisites: input.prerequisites ?? [],
    rating: input.rating ?? 0,
    total_reviews: input.totalReviews ?? 0,
    tags: input.tags ?? [],
    course_id: (input.courseId && input.courseId !== '') ? input.courseId : null,
    type: input.type ?? 'public',
    admin_id: admin_id,
  };

  // console.log("--- Debugging createCertification Payload ---"); // Removed debugging logs
  // console.log("title:", payload.title);
  // console.log("provider:", payload.provider);
  // console.log("category:", payload.category);
  // console.log("difficulty:", payload.difficulty);
  // console.log("duration:", payload.duration);
  // console.log("description:", payload.description);
  // console.log("image_url:", payload.image_url);
  // console.log("external_url:", payload.external_url);
  // console.log("is_free:", payload.is_free);
  // console.log("certification_type:", payload.certification_type);
  // console.log("skills:", payload.skills);
  // console.log("prerequisites:", payload.prerequisites);
  // console.log("rating:", payload.rating);
  // console.log("total_reviews:", payload.total_reviews);
  // console.log("tags:", payload.tags);
  // console.log("course_id:", payload.course_id);
  // console.log("type:", payload.type);
  // console.log("admin_id:", payload.admin_id);
  // console.log("-------------------------------------------");

  const { data, error } = await supabase.from("certifications").insert(payload).select().single();
  return { data: data as Certification, error };
}

export async function updateCertification(id: string, patch: Partial<CertificationInput>) {
  const mapped: any = {};
  if (patch.title !== undefined) mapped.title = patch.title;
  if (patch.provider !== undefined) mapped.provider = patch.provider;
  if (patch.category !== undefined) mapped.category = patch.category;
  if (patch.difficulty !== undefined) mapped.difficulty = patch.difficulty;
  if (patch.duration !== undefined) mapped.duration = patch.duration;
  if (patch.description !== undefined) mapped.description = patch.description;
  if (patch.skills !== undefined) mapped.skills = patch.skills;
  if (patch.prerequisites !== undefined) mapped.prerequisites = patch.prerequisites;
  if (patch.rating !== undefined) mapped.rating = patch.rating;
  if (patch.totalReviews !== undefined) mapped.total_reviews = patch.totalReviews;
  if (patch.imageUrl !== undefined) mapped.image_url = patch.imageUrl;
  if (patch.externalUrl !== undefined) mapped.external_url = patch.externalUrl;
  if (patch.isFree !== undefined) mapped.is_free = patch.isFree;
  if (patch.certificationType !== undefined) mapped.certification_type = patch.certificationType;
  if (patch.tags !== undefined) mapped.tags = patch.tags;
  if (patch.type !== undefined) mapped.type = patch.type;
  if (patch.courseId !== undefined) mapped.course_id = patch.courseId;
  return supabase.from("certifications").update(mapped).eq("id", id);
}

export async function deleteCertification(id: string) {
  return supabase.from("certifications").delete().eq("id", id);
}

// --- User Favorites API ---
export async function addFavorite(userId: string, certificationId: string) {
  const { data, error } = await supabase.from("user_favorites").insert({
    user_id: userId,
    certification_id: certificationId,
  }).select().single();
  return { data, error };
}

export async function removeFavorite(userId: string, certificationId: string) {
  const { error } = await supabase.from("user_favorites").delete().eq("user_id", userId).eq("certification_id", certificationId);
  return { error };
}

export async function checkFavoriteStatus(userId: string, certificationId: string) {
  const { data, error } = await supabase
    .from("user_favorites")
    .select("id")
    .eq("user_id", userId)
    .eq("certification_id", certificationId)
    .maybeSingle(); // Use maybeSingle for when no row is found
  
  if (error) {
    console.error("Error checking favorite status:", error.message);
    return { data: false, error };
  }
  return { data: !!data, error: null };
}


// --- CertiFree Courses CRUD (These operate on the 'courses' table) ---
export async function createCourse(input: CourseInput) {
  const { data: profileData, error: profileError } = await supabase
    .from('profiles')
    .select('id')
    .eq('id', (await supabase.auth.getUser()).data.user?.id)
    .single();

  if (profileError || !profileData) {
    throw new Error('User profile not found or not authenticated.');
  }

  return supabase.from("courses").insert({
    title: input.title,
    description: input.description ?? null,
    image_url: input.imageUrl ?? null,
    status: input.status ?? 'draft',
    created_by: profileData.id,
  });
}

export async function getCourse(id: string) {
  return supabase.from("courses").select("*, lessons(*)").eq("id", id).single();
}

export async function updateCourse(id: string, patch: Partial<CourseInput>) {
  const mapped: any = {};
  if (patch.title !== undefined) mapped.title = patch.title;
  if (patch.description !== undefined) mapped.description = patch.description;
  if (patch.imageUrl !== undefined) mapped.image_url = patch.imageUrl;
  if (patch.status !== undefined) mapped.status = patch.status;
  mapped.updated_at = new Date().toISOString();
  return supabase.from("courses").update(mapped).eq("id", id);
}

export async function deleteCourse(id: string) {
  return supabase.from("courses").delete().eq("id", id);
}

export async function listCourses() {
  return supabase.from("courses").select("*").order("created_at", { ascending: false });
}

// --- CertiFree Lessons CRUD ---
export async function createLesson(input: LessonInput) {
  return supabase.from("lessons").insert({
    course_id: input.courseId,
    title: input.title,
    content: input.content ?? null,
    video_url: input.videoUrl ?? null,
    order: input.order,
  });
}

export async function getLesson(id: string) {
  return supabase.from("lessons").select("*").eq("id", id).single();
}

export async function updateLesson(id: string, patch: Partial<LessonInput>) {
  const mapped: any = {};
  if (patch.title !== undefined) mapped.title = patch.title;
  if (patch.content !== undefined) mapped.content = patch.content;
  if (patch.videoUrl !== undefined) mapped.video_url = patch.videoUrl;
  if (patch.order !== undefined) mapped.order = patch.order;
  mapped.updated_at = new Date().toISOString();
  return supabase.from("lessons").update(mapped).eq("id", id);
}

export async function deleteLesson(id: string) {
  return supabase.from("lessons").delete().eq("id", id);
}

export async function listLessons(courseId: string) {
  return supabase.from("lessons").select("*").eq("course_id", courseId).order("order");
}


// --- CertiFree Enrollments API ---
export const enrollUserInCourse = async (user_id: string, course_id: string) => {
  const { data, error } = await supabase
    .from('course_enrollments') // Updated to course_enrollments
    .insert({ user_id, course_id, progress: 0, progress_array: [], completed_modules_count: 0, passed_quizzes: [] })
    .select()
    .single();
  return { data, error };
};

export const getCertiFreeEnrollment = async (user_id: string, course_id: string) => {
  const { data, error } = await supabase
    .from('course_enrollments') // Updated to course_enrollments
    .select('*')
    .eq('user_id', user_id)
    .eq('course_id', course_id)
    .single();
  return { data, error };
};

export const listUserCertiFreeEnrollments = async (user_id: string) => {
  const { data, error } = await supabase
    .from('course_enrollments') // Updated to course_enrollments
    .select('*, certifications(*)') // Join with certifications table
    .eq('user_id', user_id);
  return { data, error };
};

export const updateCertiFreeEnrollmentProgress = async (
  enrollment_id: string,
  progress: number,
  progress_array: number[],
  completed_modules_count: number,
  passed_quizzes: string[],
  completed_at: string | null = null
) => {
  const updates: { progress: number; progress_array: number[]; completed_modules_count: number; passed_quizzes: string[]; completed_at?: string } = { progress, progress_array, completed_modules_count, passed_quizzes };
  if (completed_at) {
    updates.completed_at = completed_at;
  }
  const { data, error } = await supabase
    .from('course_enrollments') // Updated to course_enrollments
    .update(updates)
    .eq('id', enrollment_id)
    .select()
    .single();
  return { data, error };
};


// --- CertiFree Certificate API ---
export const createCertiFreeCertificate = async (user_id: string, course_id: string, storage_path: string) => {
  const { data, error } = await supabase
    .from('certi_certificates') // Assuming this table name
    .insert({ user_id, course_id, storage_path })
    .select()
    .single();
  return { data, error };
};

export const listUserCertiFreeCertificates = async (user_id: string) => {
  const { data, error } = await supabase
    .from('certi_certificates') // Assuming this table name
    .select('*, certifications(*)') // Join with certifications table
    .eq('user_id', user_id);
  return { data, error };
};

export const getCertiFreeCertificate = async (id: string) => {
  const { data, error } = await supabase
    .from('certi_certificates') // Assuming this table name
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
};

// --- Supabase Storage for CertiFree Certificates ---
export const uploadCertiFreeCertificate = async (file: File, user_id: string, course_id: string) => {
  const fileExtension = file.name.split('.').pop();
  const filePath = `public/${user_id}/${course_id}-${Date.now()}.${fileExtension}`;

  const { data, error } = await supabase.storage
    .from('certi_certificates') // Assuming this bucket name
    .upload(filePath, file, { cacheControl: '3600', upsert: false });

  if (error) {
    return { url: null, error };
  }

  const { data: publicUrlData } = supabase.storage
    .from('certi_certificates') // Assuming this bucket name
    .getPublicUrl(filePath);

  return { url: publicUrlData.publicUrl, error: null };
};

export const getCertiFreeCertificatePublicUrl = (storage_path: string) => {
  const { data } = supabase.storage
    .from('certi_certificates') // Assuming this bucket name
    .getPublicUrl(storage_path);
  return data.publicUrl;
};


// --- CertiFree Quiz API ---
export const createCertiFreeQuiz = async (quiz: Omit<CertiFreeQuiz, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('certifree_quizzes')
    .insert(quiz)
    .select()
    .single();
  return { data, error };
};

export const getCertiFreeQuiz = async (id: string) => {
  const { data, error } = await supabase
    .from('certifree_quizzes')
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
};

export const listCertiFreeQuizzesByModule = async (module_id: string) => {
  const { data, error } = await supabase
    .from('certifree_quizzes')
    .select('*')
    .eq('module_id', module_id)
    .order('order', { ascending: true });
  return { data, error };
};

export const listCertiFreeQuizzesByCourse = async (course_id: string) => {
  const { data, error } = await supabase
    .from('certifree_quizzes')
    .select('*')
    .eq('course_id', course_id)
    .order('order', { ascending: true });
  return { data, error };
};

export const updateCertiFreeQuiz = async (id: string, updates: Partial<CertiFreeQuiz>) => {
  const { data, error } = await supabase
    .from('certifree_quizzes')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  return { data, error };
};

export const deleteCertiFreeQuiz = async (id: string) => {
  const { error } = await supabase
    .from('certifree_quizzes')
    .delete()
    .eq('id', id);
  return { error };
};


// --- CertiFree Quiz Question API ---
export const createCertiFreeQuizQuestion = async (question: Omit<CertiFreeQuizQuestion, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('certifree_quiz_questions')
    .insert(question)
    .select()
    .single();
  return { data, error };
};

export const getCertiFreeQuizQuestion = async (id: string) => {
  const { data, error } = await supabase
    .from('certifree_quiz_questions')
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
};

export const listCertiFreeQuizQuestionsByQuiz = async (quiz_id: string) => {
  const { data, error } = await supabase
    .from('certifree_quiz_questions')
    .select('*')
    .eq('quiz_id', quiz_id)
    .order('order', { ascending: true });
  return { data, error };
};

export const updateCertiFreeQuizQuestion = async (id: string, updates: Partial<CertiFreeQuizQuestion>) => {
  const { data, error } = await supabase
    .from('certifree_quiz_questions')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  return { data, error };
};

export const deleteCertiFreeQuizQuestion = async (id: string) => {
  const { error } = await supabase
    .from('certifree_quiz_questions')
    .delete()
    .eq('id', id);
  return { error };
};


// --- CertiFree Quiz Attempt API ---
export const createCertiFreeQuizAttempt = async (attempt: Omit<CertiFreeQuizAttempt, 'id' | 'submitted_at'>) => {
  const { data, error } = await supabase
    .from('certifree_quiz_attempts')
    .insert(attempt)
    .select()
    .single();
  return { data, error };
};

export const getCertiFreeQuizAttempt = async (id: string) => {
  const { data, error } = await supabase
    .from('certifree_quiz_attempts')
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
};

export const listUserCertiFreeQuizAttempts = async (user_id: string, quiz_id?: string) => {
  let query = supabase
    .from('certifree_quiz_attempts')
    .select('*')
    .eq('user_id', user_id);
  
  if (quiz_id) {
    query = query.eq('quiz_id', quiz_id);
  }
  
  const { data, error } = await query.order('submitted_at', { ascending: false });
  return { data, error };
};

export const updateCertiFreeQuizAttempt = async (id: string, updates: Partial<CertiFreeQuizAttempt>) => {
  const { data, error } = await supabase
    .from('certifree_quiz_attempts')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  return { data, error };
};

export const deleteCertiFreeQuizAttempt = async (id: string) => {
  const { error } = await supabase
    .from('certifree_quiz_attempts')
    .delete()
    .eq('id', id);
  return { error };
};


// --- CertiFree Module API ---
export const createCertiFreeModule = async (module: Omit<CertiFreeModule, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('certifree_modules')
    .insert(module)
    .select()
    .single();
  return { data, error };
};

export const getCertiFreeModule = async (id: string) => {
  const { data, error } = await supabase
    .from('certifree_modules')
    .select('*')
    .eq('id', id)
    .single();
  return { data, error };
};

export const listCertiFreeModulesByCourse = async (course_id: string) => {
  const { data, error } = await supabase
    .from('certifree_modules')
    .select('*')
    .eq('course_id', course_id)
    .order('order', { ascending: true });
  return { data, error };
};

export const updateCertiFreeModule = async (id: string, updates: Partial<CertiFreeModule>) => {
  const { data, error } = await supabase
    .from('certifree_modules')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  return { data, error };
};

export const deleteCertiFreeModule = async (id: string) => {
  const { error } = await supabase
    .from('certifree_modules')
    .delete()
    .eq('id', id);
  return { error };
};